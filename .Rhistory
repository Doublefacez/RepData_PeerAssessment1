cohensD(average ~ season, data = Data)
t.test(max ~ season, data = Data)
cohensD(max ~ season, data = Data)
t.test(min ~ season, data = Data)
cohensD(min ~ season, data = Data)
t.test(fluc ~ season, data = Data)
cohensD(fluc ~ season, data = Data)
cohensD(roc ~ season, data = Data)
t.test(roc ~ season, data = Data)
cohensD(roc ~ season, data = Data)
library(rcompanion)
library(coin)
library(coin)
library(DescTools)
library(effsize)
install.packages("effsize")
install.packages("coin")
Data = read.csv(file.choose(), header=T)
Data = read.csv(file.choose(), header=T)
View(Data)
wilcox.test(average ~ season, data=Data)
wilcox.test(fluc ~ season, data=Data)
wilcox.test(average ~ season, data=Data)
wilcox.test(average ~ season, data=Data)
wilcox.test(max ~ season, data=Data)
wilcox.test(min ~ season, data=Data)
wilcox.test(fluc ~ season, data=Data)
wilcox.test(roc ~ season, data=Data)
library("psych")
library(psych)
library(nlme)
library(car)
library(multcompView)
library(lsmeans)
library(ggplot2)
library(rcompanion)
library(swirl)
swirl()
#Lesson 6
head(airquality)
xyplot(Ozone~wind, data = airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Bing Apple Data")
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind| as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind| Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
print(p)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
p <- xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
print(p)
invisible()
pathofile("plot1.R", local = TRUE)
source(pathofile("plot1.R"), local = TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
diamonds$color
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat| color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat| color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
#Lesson 7
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
pq(6)
p(6)
p1(6)
oxcc
0xcc
colorRampPalette(colors = "red", yellow)
colorRampPalette(colors = "red", "yellow")
colorRampPalette(colors = c("red", "yellow"))
p2 <- colorRampPalette(colors = c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(colors = c("blue", "green"), alpha(5))
p3 <- colorRampPalette(colors = c("blue", "green"), alpha(.5))
p3
sdsa
showMe(p2(2))
p3 <- colorRampPalette(colors = c("blue", "green"), alpha= .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5,.5))
plot(x, y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
p1(20)
image(volcano, col = p1(20))
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, aes(col = drv))
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
geom(c("point", "smoth"))
geom(c("point", "smooth"))
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom(c("point", "smooth")))
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y =hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data =  mpg, facets = .~drv)
qplot(hwy, data =  mpg, facets = drv~., binwidth = 2)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
5
12
abline(h = .05, col = "green")
dFsm
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
#Lesson 12
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = +3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClus2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, pch = 9, cex = 2, lwd = 2, col = cols1)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch =3, cex =3, lwd =3 )
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
plot(x,y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex =2)
#Lesson 13
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source(filename("addPatt.R"), local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
scale(svd(mat))
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u[,1]%*%svd1$d[1]
a1 <- svd1$u[,1]*svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1]*svd1$d[1]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1]*svd1$d[1]) %*% diag(t(svd1$v[,1:2]))
a2 <- (svd1$u[,1]*svd1$d[1]) %*% diag(t(svd1$v[,1:2]))
svd2$d
a2 <- svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(a5)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl()
#Lesson 14
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<- subset(ssd, subject = 1)
sub1<- subset(ssd, subject == 1)
sub1
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1$[,1:3])
mdist <- dist(sub1$[,1:3])
myedit("showXY.R")
mdist <- dist(sub1$[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1$[, c(10:12, maxCon)])
mdist <- dist(sub1$[, 10:12])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- call(kClust$size==29)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1$[,1:3])
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown CLuster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "walkdown CLuster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
#Lesson 15
dim(om0)
#Lesson 15
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = T)
cnames
names(pm0) <- make.names(cnames[[1]][[wcol]])
names(pm0) <- make.names(cnames[[1]][wcol]])
names(pm0) <- make.names(cnames[[1]][wcol]])
names(pm0) <- make.names(cnames[[1]][wcol])
head(om0)
head(pm0)
x0 <-  pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(pm1))
mean(is.na(x1))
x0
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log(x0, 10), log(x1, 10))
boxplot(log10(x0), log10(x1))
negative <- x1 <0
sum(negative, na.rm = T)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates, %Y%m%d))
dates <- as.Date(as.character(dates, "%Y%m%d"))
dates <- as.Date(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% pm0 & pm1)
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID = 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub, na.rm = T), lwd= 2)
abline(median(x0sub, na.rm = TRUE), lwd= 2)
both
abline(h=median(x0sub, na.rm = TRUE), lwd= 2)
plot(dates1, h = median(x1sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch =20)
abline(h=median(x1sub, na.rm = TRUE), lwd= 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(Sample.Value), na.rm=TRUE))
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
mn1
summary(mn1)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set = "state")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1:52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2, 52), mrg[,3]))
segments(rep(1:52),mrg[,2], rep(2:52), mrg[,3])
segments(rep(1,52),mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x <mean.y, ]
mrg[mrg$mean.x <mrg$mean.y, ]
dir()
getwd()
setwd("C:/Users/lamti/Desktop/datasciencecoursera/Course 5 Reproducible Research/Week 2/peer review assessment/RepData_PeerAssessment1")
getwd()
data <- read.csv("activity.csv", header = TRUE)
head(data)
View(data)
nrow(data)
# Week 2 Peer review assessment
library(dplyr)
total_step <- sum(data$steps, na.rm = TRUE)
total_step
str(date)
str(data)
data1 <- data %>%
group_by(date)%>%
summarise(sum_each_day = sum(steps, na.rm=TRUE))
data1
hist(data1$sum_each_day)
hist(data1$date)
hist(data1$sum_each_day)
hist(data1$sum_each_day, xlab = "Total number of steps each day")
hist(data1$sum_each_day, xlab = "Total number of steps each day", main = "Histogram of steps perday")
#Question 2 Histogram of the total number of steps taken each day
total_step <- data %>%
group_by(date)%>%
summarise(sum_each_day = sum(steps, na.rm=TRUE))
hist(total_step$sum_each_day, xlab = "Total number of steps each day", main = "Histogram of steps perday")
#Question 3 Calculatethe mean and median of the total number of steps taken per day
mean_t_step <- mean(total_step$sum_each_day)
median_t_step <- median(total_step$sum_each_day)
mean_t_step
median_t_step
#Question 3 Calculatethe mean and median of the total number of steps taken per day
mean_t_step <- mean(total_step$sum_each_day, na.rm = TRUE)
median_t_step <- median(total_step$sum_each_day, na.rm = TRUE)
mean_t_step
median_t_step
View(data)
plot(data$interval, data1$sum_each_day, type = "l")
plot(data$interval~data1$sum_each_day, type = "l")
a <- data[!is.na(data$steps),]
a
tapply(a, steps, mean)
a
tapply(a, steps, mean)
colnames(a)
tapply(a, interval, mean)
tapply(a, steps, mean)
b <- aggregate(steps~interval, data, mean)
b
plot(b$steps, b$interval, type = "l")
plot(b$interval, b$steps, type = "l")
tidy <- data[!is.na(data$steps),]
tidy
tidy <- filter(data, steps == !is.na(steps))
tidy
tidy <- filter(data, !is.na(steps))
tidy
View(a)
b <- aggregate(steps~interval, tidy, mean)
b
plot(b$interval, b$steps, type = "l")
clean <- filter(data, !is.na(steps))
tidy <- aggregate(steps~interval, clean, mean)
tidy
plot(tidy$interval, tidy$steps, type = "l")
clean <- filter(data, !is.na(steps))
tidy <- aggregate(steps~interval, clean, mean)
plot(tidy$interval, tidy$steps, type = "l", xlab = "Time", ylab = "Steps")
plot(tidy$interval, tidy$steps, type = "l", xlab = "Time", ylab = "Steps", main = "Average daily number of steps")
clean <- filter(data, !is.na(steps)) %>%
data$interval/100
clean <- filter(data, !is.na(steps)) %>%
data$interval=data$interval/100
clean <- filter(data, !is.na(steps)) %>%
data$interval==data$interval/100
clean <- filter(data, !is.na(steps)) %>%
clean$interval <- clean$interval/100
clean <- filter(data, !is.na(steps))
clean$interval <- clean$interval/100
clean
tidy <- aggregate(steps~interval, clean, mean)
plot(tidy$interval, tidy$steps, type = "l", xlab = "Time", ylab = "Steps", main = "Average steps per time interval")
#Question 5
clean
#Question 5
str(clean)
max_step <- filter(clean, max(steps))
max_step <- filter(clean, steps==max(steps))
max_step
clean <- filter(data, !is.na(steps))
clean$interval <- clean$interval/100
tidy <- aggregate(steps~interval, clean, mean)
plot(tidy$interval, tidy$steps, type = "l", xlab = "Time", ylab = "Steps", main = "Average steps per time interval")
#Question 5
str(tidy)
max_step <- filter(tidy, steps==max(steps))
max_step
rename(tidy, Time interval = interval)
rename(tidy, Time interval = 1)
rename(data = tidy, Time interval = 1)
tidy%>%
rename(Time interval = interval)
rename(data = tidy, Time_interval = 1)
tidy%>%
rename(Time interval = interval)
tidy%>%
rename(Time_interval = interval)
tidy
tidy<- tidy%>%
rename(Time_interval = interval)
tidy
max_step <- filter(tidy, steps==max(steps))
max_step
miss <- sum(is.na(data))
miss
View(data)
mean_t_step
median_t_step
data1 <- data
data1$steps[is.na(data1$steps)] <- mean(data1$steps, na.rm = TRUE)
data1
tidy <- aggregate(steps~interval, clean, mean)
tidy
tidy
clean <- filter(data, !is.na(steps))
clean
tidy <- aggregate(steps~interval, clean, mean)
tidy
plot(tidy$interval, tidy$steps, type = "l", xlab = "Time", ylab = "Steps", main = "Average steps per time interval")
View(tidy)
data1 <- data %>%
mutate(steps = case_when(is.na(steps) ~ tidy$steps[match(
data$interval)], TRUE ~ as.numeric(steps)
))
data1 <- data %>%
mutate(steps = case_when(is.na(steps) ~ tidy$steps[match(
data$interval, tidy$interval)], TRUE ~ as.numeric(steps)
))
data1
fill_na <- data %>%
mutate(steps = case_when(is.na(steps) ~ tidy$steps[match(
data$interval, tidy$interval)], TRUE ~ as.numeric(steps)
))
fill_na
miss <- sum(is.na(data))
miss
